package com.etf.controllers;

import com.etf.dtos.Soba;
import com.etf.dtos.SobaDAO;
import com.etf.exceptions.NotFoundException;
import com.etf.feign.ReservationClient;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Validated
@RestController
@RequestMapping(path = "/Reservation/Soba")
public class SobaController {

    @Autowired
    // This means to get the bean called userRepository
    //Which is auto-generated by Spring, we will use it to handle the data
    private ReservationClient sobaClient;

    @PostMapping(path = "/")
    ResponseEntity<String> addNewSoba(@RequestBody @Valid SobaDAO sobaDAO){

        sobaClient.addNewSoba(sobaDAO);
        return ResponseEntity.ok("Room has been added.");
    }

    @GetMapping(path = "/")
    public @ResponseBody Iterable<Soba> getAllSobe(){

        return sobaClient.getAllSobe();
    }

    @GetMapping(path = "/GetByNazivSobe/{nazivSobe}")
    public @ResponseBody ResponseEntity<?> getSobaByNazivSobe(@PathVariable("nazivSobe") String nazivSobe){

        try{
            ResponseEntity<?> soba = sobaClient.getSobaByNazivSobe(nazivSobe);

            return ResponseEntity.ok(soba.getBody());

        }catch (Exception e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/GetById/{id}")
    public @ResponseBody ResponseEntity<?> getSobaById(@PathVariable("id") Integer id){

        try{
            ResponseEntity<?> soba = sobaClient.getSobaById(id);

            return ResponseEntity.ok(soba.getBody());
        }catch (Exception e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PutMapping(path = "/Naziv/{id}")
    public @ResponseBody ResponseEntity<String> updateSobaNaziv(@RequestBody String naziv, @PathVariable("id") Integer id) {

        try {
            sobaClient.updateSobaNaziv(naziv, id);

            return ResponseEntity.ok("The room has been successfully updated");
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @PutMapping(path = "/zauzetost/{id}")
    public @ResponseBody ResponseEntity<String> updateSobaZauzetost(@RequestBody String zauzetost, @PathVariable("id") Integer id){

        try{
            sobaClient.updateSobaZauzetost(zauzetost, id);

            return ResponseEntity.ok("The room has been successfully updated");
        }
        catch (Exception e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @PutMapping(path = "/privateShared/{id}")
    public @ResponseBody ResponseEntity<String> updateSobaPrivateShared(@RequestBody String privateShared, @PathVariable("id") Integer id){

        try{
            sobaClient.updateSobaPrivateShared(privateShared, id);

            return ResponseEntity.ok("The room has been successfully updated");
        }
        catch (Exception e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping(path = "/byId/{id}")
    public @ResponseBody ResponseEntity<String> deleteSobaById(@PathVariable("id") Integer id){

        try{
            sobaClient.deleteSobaById(id);

            return ResponseEntity.ok("The room has been successfully deleted");
        }
        catch (Exception e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


}
